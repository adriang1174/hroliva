
<%
'clsUpload @0-1EE4C9EA
Class clsUpload
' ------------------------------------------------------------------------------

	Private mbinData
	Private CR
	Private LF
	Private CRLF
	Private mFieldAr
	Private mCount	
	
' ------------------------------------------------------------------------------

' ------------------------------------------------------------------------------
	Private Sub Parse(block)
		
		Dim strName
		Dim strFileName
		Dim strContentType
		Dim binData	
		Dim strDisposition
		Dim strValue			

		Dim iStart	
		Dim iEnd
		Dim lData
		
		iStart = InStrB(1, block, CRLF & StrToByteStr("Content-Type:"), vbTextCompare)
		If iStart > 0 Then 
			iStart = iStart + 15
			iEnd = InStrB(iStart, block, CR)
			If Not (iEnd = 0 Or iStart >= iEnd) Then _
				strContentType = Trim(ByteStrToStr(MidB(block, iStart,iEnd - iStart)))
        End If

		iStart = InStrB(1, block, CRLF & CRLF)
		If iStart >0 Then 
				iStart = iStart + 4
                lData = MidB(block, iStart)
		End If

		iStart = InStrB(1, block, CRLF & StrToByteStr("Content-Disposition:"), vbTextCompare)
		If iStart >0 Then 
  			iStart = iStart + 22
			iEnd = InStrB(iStart, block, CRLF)
			If Not (iEnd = 0  Or  iStart >= iEnd) Then 
			        strDisposition = ByteStrToStr(MidB(block, iStart, iEnd - iStart))

				iStart = InStr(1, strDisposition, "name=""", vbTextCompare)
				If iStart >0 Then 
					iStart = iStart + 6
					iEnd = InStr(iStart, strDisposition, """")
					If Not (iEnd = 0 Or iStart >= iEnd) Then _
						strName = Mid(strDisposition, iStart, iEnd - iStart)
		        End If

				iStart = InStr(1, strDisposition, "filename=""", vbTextCompare)
				If iStart > 0 Then 
					iStart = iStart + 10
					iEnd = InStr(iStart, strDisposition, """")
					If Not (iEnd = 0 Or iStart >= iEnd) Then _
						strFileName = Mid(strDisposition, iStart, iEnd - iStart)
		                End If
	            End If
        End If

		If strContentType = "" Then
			strValue = ByteStrToStr(lData)
        Else 
            binData=lData 
		End If

		If Exists(strName) Then 
 		   Fields(strName).Value = Fields(strName).Value & ", " & strValue
  		Else 
 		   Dim oField
 		   Set oField = New clsVBSUploadField
		   ReDim Preserve mFieldAr(mCount)
		   oField.Name = strName
		   If LenB(binData) = 0 Then
		     oField.Value = strValue
  		     oField.Length = Len(strValue)
		   Else
 		     oField.FilePath = strFileName				
		     oField.BinaryData = binData
		     oField.Length = LenB(binData)
		   End If
	  	   Set mFieldAr(mCount) = oField
		   mCount = mCount + 1
		End If
	End Sub


        Private Function Exists(strName)
		Dim i
		If mCount>0 Then 
			For i = 0 To mCount - 1
				If strName = mFieldAr(i).Name Then 
					Exists = True
					Exit Function
				End If 
			Next
		End If
		Exists = False
        End Function


	Public Property Get Count()
		Count = mCount
	End Property

        Public Function FileCount()
               Dim i,c
               c=0
       	       For i = 0 To mCount - 1
 	         If mFieldAr(i).Filepath <> "" Then c = c + 1
	       Next
               FileCount = c
        End Function

	Public Default Property Get Fields(strName)
		Dim i
		If IsNumeric(strName) Then
			i = CLng(strName)
			If i < mCount And i >=0 Then	
				Set Fields = mFieldAr(strName)
				Exit Property
            End If
		Else
			strName = LCase(strname)
			For i = 0 To mCount - 1
				If LCase(mFieldAr(i).Name) = strName Then
					Set Fields = mFieldAr(i)
					Exit Property
				End If
			Next
		End If
		Set Fields = New clsVBSUploadField
	End Property

	Private Sub Class_Initialize()
                Dim strDelimiter
		CR = ChrB(13)
		LF = ChrB(10)
		CRLF = CR  & LF
		mCount = 0
		ReDim mFieldAr(-1)
		mbinData = Request.BinaryRead(Request.TotalBytes)
		strDelimiter = ExtractToken(1, InStrB(1, mbinData, CRLF) - 1)
		Dim nDataStart	' start position of chunk data
		Dim nDataEnd		' Last position of chunk data
		nDataStart = FindToken(1, strDelimiter & CRLF)
		While Not nDataStart = 0
			nDataEnd = FindToken(nDataStart + 1,  strDelimiter) - 2
			Parse ExtractToken(nDataStart, nDataEnd - nDataStart)
			nDataStart = FindToken(nDataStart + 1, strDelimiter & CRLF)
		Wend
	End Sub

	Private Sub Class_Terminate()
		Dim l
		For l = 0 To mCount - 1
			Set mFieldAr(l) = Nothing
		Next
		ReDim mFieldAr(-1)
	
	End Sub

	Private Function FindToken(nStart, sToken)
		FindToken = InstrB(nStart, mbinData, sToken)
	End Function

	Private Function ExtractToken(nStart, nEnd)
		ExtractToken = MidB(mbinData, nStart, nEnd)
	End Function

	Private Function ByteStrToStr(bsString)
		Dim i
		ByteStrToStr =""
		For i = 1 to LenB(bsString)
		   ByteStrToStr = ByteStrToStr & Chr(AscB(MidB(bsString,i,1))) 
		Next
	End Function

	Private Function StrToByteStr(sString)
		Dim i
		For i = 1 to Len(sString)
		   StrToByteStr = StrToByteStr & ChrB(AscB(Mid(sString,i,1)))
		Next
	End Function
End Class

'End clsUpload

'clsVBSUploadField @0-E28DEA74
Class clsVBSUploadField
	
	Public Name	
	Public FileName	
	Public Value	
	Public Length			
	Public BinaryData	

	Private mPath


	Private Sub Class_Initialize()
		BinaryData = ChrB(0)
		Value = ""
                mPath = ""
	End Sub
	
	Public Sub SaveAs(strFileName)
		Dim objStream
                Dim objRS
		Dim iBytes
		If Length=0 Or LenB(BinaryData) = 0 Then Exit Sub
		Set objStream = Server.CreateObject("ADODB.Stream")
		objStream.Type = adTypeBinary
		objStream.Open
		iBytes = LenB(BinaryData)
		Set objRS = Server.CreateObject("ADODB.Recordset")
		objRS.Fields.Append "BinaryData", adLongVarBinary, iBytes
		objRS.Open
		objRS.AddNew
		objRS.Fields("BinaryData").AppendChunk(BinaryData & ChrB(0))
		objRS.Update
		iBytes = objRS.Fields("BinaryData").GetChunk(iBytes)
		objRS.Close
		Set objRS = Nothing
		objStream.Write(iBytes)
		objStream.SaveToFile strFileName, adSaveCreateOverWrite
		objStream.Close
		Set objStream = Nothing
	End Sub

	Public Property Let FilePath(ByRef pstrPath)
		mPath = pstrPath
		If Not InStrRev(pstrPath, "\") = 0 Then
			FileName = Mid(pstrPath, InStrRev(pstrPath, "\") + 1)
		Else   
			FileName = mPath
		End If
	End Property

	Public Property Get FilePath()
		FilePath = mPath
	End Property
End Class

'End clsVBSUploadField


%>
